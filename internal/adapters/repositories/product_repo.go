package repositories

import (
	"fmt"

	"github.com/lakeside763/product-service/internal/core/models"
	"github.com/lakeside763/product-service/internal/ports/interfaces"
	"github.com/lakeside763/product-service/pkg/utils"
	"gorm.io/gorm"
)

type ProductRepo struct {
	DB *gorm.DB
}

func NewProductRepo(db *gorm.DB) interfaces.Products {
	return &ProductRepo{DB: db}
}

// GetProducts implements interfaces.Products.
func (repo *ProductRepo) GetProducts(category string, priceLessThan int, cursorId string, pageSize int) ([]*models.Product, string, error) {
	var products []*models.Product

	pageSize = utils.PageSize(pageSize)
	priceLessThan = utils.ConvertPriceToStoredFormat(float64(priceLessThan))

	// Start the query
	query := repo.DB.Where("category = ?", category).Limit(pageSize).Order("serial_id ASC")

	// Apply the price filter conditionally
	if priceLessThan > 0 {
		query = query.Where("price < ?", priceLessThan)
	}

	// Apply the ID filter only if cursorId is not empty
	if cursorId != "" {
		serialId, err := utils.DecodeCursorId(cursorId)
		if err != nil {
			return nil, "", fmt.Errorf("invalid cursor: %w", err)
		}
		query = query.Where("serial_id > ?", serialId)
	}

	// Execute the query
	if err := query.Find(&products).Error; err != nil {
		return nil, "", err
	}

	nextCursorId := utils.GetNextCursor(products, func(item *models.Product) int64 {
		return item.SerialId
	})

	return products, nextCursorId, nil
}

func (repo *ProductRepo) GetMaxDiscount(category string, sku string) (float64, error) {
	var maxDiscount float64
	err := repo.DB.Table("discounts").
				Select("MAX(discount_percentage)").
				Where("category = ? OR sku = ?", category, sku).
				Scan(&maxDiscount).Error

	if err != nil {
		return 0, err
	}

	return maxDiscount, nil
}

func (repo *ProductRepo) CreateProduct(p models.CreateProductInput) (*models.Product, error) {
	// Create new product
	newProduct := models.Product{
		Name:     p.Name,
		Category: p.Category,
		Price:    utils.ConvertPriceToStoredFormat(p.Price), // Ensure correct type conversion
	}

	// Insert into the database
	if err := repo.DB.Create(&newProduct).Error; err != nil {
		return nil, fmt.Errorf("failed to create product: %w", err)
	}

	// Gorm is not fetching the serial_id and the sku after auto generated by DB
	if err := repo.DB.First(&newProduct, "id = ?", newProduct.ID).Error; err != nil {
    return nil, fmt.Errorf("failed to fetch product after creation: %w", err)
	}

	return &newProduct, nil
}


func (repo *ProductRepo) CheckProductExistsByName(name string) error {
	var existingProduct models.Product
	err := repo.DB.Where("name = ?", name).First(&existingProduct).Error;
	if err != nil {
		return utils.HandleGormRecordNotFoundError(err)
	}
	// If a product is found, return a meaningful error
	return fmt.Errorf("product with the name '%s' already exists", name)
}



